# Resource import JSON:
# 
# [
#     {
#         "ResourceType": "AWS::IAM::Group",
#         "LogicalResourceId": "IAMGroup",
#         "ResourceIdentifier": {
#             "GroupName": "acc_3rd"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkAcl",
#         "LogicalResourceId": "EC2NetworkAcl",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::EIP",
#         "LogicalResourceId": "EC2EIP",
#         "ResourceIdentifier": {
#             "PublicIp": "43.201.199.174"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::VPC",
#         "LogicalResourceId": "EC2VPC",
#         "ResourceIdentifier": {
#             "VpcId": "vpc-0c8493f4150a0df57"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::SecurityGroup",
#         "LogicalResourceId": "EC2SecurityGroup",
#         "ResourceIdentifier": {
#             "GroupId": "sg-0045c90991e71a544"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::SecurityGroup",
#         "LogicalResourceId": "EC2SecurityGroup2",
#         "ResourceIdentifier": {
#             "GroupId": "sg-060cd048907161936"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::Subnet",
#         "LogicalResourceId": "EC2Subnet",
#         "ResourceIdentifier": {
#             "SubnetId": "subnet-0f72a65a6191d913e"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::Subnet",
#         "LogicalResourceId": "EC2Subnet2",
#         "ResourceIdentifier": {
#             "SubnetId": "subnet-0963c35bbcbea0c11"
#         }
#     },
#     {
#         "ResourceType": "AWS::Lambda::Function",
#         "LogicalResourceId": "LambdaFunction",
#         "ResourceIdentifier": {
#             "FunctionName": "to2-updateUser"
#         }
#     },
#     {
#         "ResourceType": "AWS::Lambda::Function",
#         "LogicalResourceId": "LambdaFunction2",
#         "ResourceIdentifier": {
#             "FunctionName": "to2-access-token-email"
#         }
#     },
#     {
#         "ResourceType": "AWS::Lambda::Function",
#         "LogicalResourceId": "LambdaFunction3",
#         "ResourceIdentifier": {
#             "FunctionName": "to2-jwks-proxy"
#         }
#     },
#     {
#         "ResourceType": "AWS::ElasticLoadBalancingV2::LoadBalancer",
#         "LogicalResourceId": "ElasticLoadBalancingV2LoadBalancer",
#         "ResourceIdentifier": {
#             "LoadBalancerArn": "arn:aws:elasticloadbalancing:ap-northeast-2:416536687282:loadbalancer/app/to2-alb/f480be342bfa447e"
#         }
#     },
#     {
#         "ResourceType": "AWS::ElasticLoadBalancingV2::Listener",
#         "LogicalResourceId": "ElasticLoadBalancingV2Listener",
#         "ResourceIdentifier": {
#             "ListenerArn": "arn:aws:elasticloadbalancing:ap-northeast-2:416536687282:listener/app/to2-alb/f480be342bfa447e/1d21be7a088ff563"
#         }
#     },
#     {
#         "ResourceType": "AWS::ElasticLoadBalancingV2::Listener",
#         "LogicalResourceId": "ElasticLoadBalancingV2Listener2",
#         "ResourceIdentifier": {
#             "ListenerArn": "arn:aws:elasticloadbalancing:ap-northeast-2:416536687282:listener/app/to2-alb/f480be342bfa447e/4ce3d221830c92ce"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::SecurityGroup",
#         "LogicalResourceId": "EC2SecurityGroup3",
#         "ResourceIdentifier": {
#             "GroupId": "sg-04c70b00090cebe4e"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::SecurityGroup",
#         "LogicalResourceId": "EC2SecurityGroup4",
#         "ResourceIdentifier": {
#             "GroupId": "sg-04ab50d4acbfc886b"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface2",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface3",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface4",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface5",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface6",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface7",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface8",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface9",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface10",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface11",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface12",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface13",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface14",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface15",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface16",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface17",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface18",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface19",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface20",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface21",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface22",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface23",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::EC2::NetworkInterface",
#         "LogicalResourceId": "EC2NetworkInterface24",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::ECS::Cluster",
#         "LogicalResourceId": "ECSCluster",
#         "ResourceIdentifier": {
#             "ClusterName": "to2-ecs-cluster"
#         }
#     },
#     {
#         "ResourceType": "AWS::ECS::Service",
#         "LogicalResourceId": "ECSService",
#         "ResourceIdentifier": {
#             "ServiceArn": "arn:aws:ecs:ap-northeast-2:416536687282:service/to2-ecs-cluster/to2-task-definition-service-ovxd3686",
#             "Cluster": "arn:aws:ecs:ap-northeast-2:416536687282:cluster/to2-ecs-cluster"
#         }
#     },
#     {
#         "ResourceType": "AWS::ECS::TaskDefinition",
#         "LogicalResourceId": "ECSTaskDefinition",
#         "ResourceIdentifier": {
#             "TaskDefinitionArn": "arn:aws:ecs:ap-northeast-2:416536687282:task-definition/to2-task-definition:22"
#         }
#     },
#     {
#         "ResourceType": "AWS::S3::Bucket",
#         "LogicalResourceId": "S3Bucket",
#         "ResourceIdentifier": {
#             "BucketName": "to2-chat"
#         }
#     },
#     {
#         "ResourceType": "AWS::DynamoDB::Table",
#         "LogicalResourceId": "DynamoDBTable",
#         "ResourceIdentifier": {
#             "TableName": "to2"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::Subnet",
#         "LogicalResourceId": "EC2Subnet3",
#         "ResourceIdentifier": {
#             "SubnetId": "subnet-03267fafcc5eba861"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::Subnet",
#         "LogicalResourceId": "EC2Subnet4",
#         "ResourceIdentifier": {
#             "SubnetId": "subnet-0ba1a32b158aff478"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::NatGateway",
#         "LogicalResourceId": "EC2NatGateway",
#         "ResourceIdentifier": {
#             "NatGatewayId": "nat-0491e93ee2fad657b"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::InternetGateway",
#         "LogicalResourceId": "EC2InternetGateway",
#         "ResourceIdentifier": {
#             "InternetGatewayId": "igw-0fe9dd3d1b0ca5c9f"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::RouteTable",
#         "LogicalResourceId": "EC2RouteTable",
#         "ResourceIdentifier": {
#             "RouteTableId": "rtb-03e69b31778c06ebe"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::RouteTable",
#         "LogicalResourceId": "EC2RouteTable2",
#         "ResourceIdentifier": {
#             "RouteTableId": "rtb-0bc488cc9e3dfe1bc"
#         }
#     },
#     {
#         "ResourceType": "AWS::EC2::RouteTable",
#         "LogicalResourceId": "EC2RouteTable3",
#         "ResourceIdentifier": {
#             "RouteTableId": "rtb-051256872bafb707f"
#         }
#     },
#     {
#         "ResourceType": "AWS::Route53::HostedZone",
#         "LogicalResourceId": "Route53HostedZone",
#         "ResourceIdentifier": {}
#     },
#     {
#         "ResourceType": "AWS::ApiGateway::RestApi",
#         "LogicalResourceId": "ApiGatewayRestApi",
#         "ResourceIdentifier": {
#             "RestApiId": "0b2wl9sn20"
#         }
#     },
#     {
#         "ResourceType": "AWS::ApiGateway::Method",
#         "LogicalResourceId": "ApiGatewayMethod",
#         "ResourceIdentifier": {
#             "RestApiId": "0b2wl9sn20",
#             "ResourceId": "nybwrh",
#             "HttpMethod": "GET"
#         }
#     },
#     {
#         "ResourceType": "AWS::ApiGateway::Stage",
#         "LogicalResourceId": "ApiGatewayStage",
#         "ResourceIdentifier": {
#             "RestApiId": "0b2wl9sn20",
#             "StageName": "prod"
#         }
#     },
#     {
#         "ResourceType": "AWS::ApiGateway::Deployment",
#         "LogicalResourceId": "ApiGatewayDeployment",
#         "ResourceIdentifier": {
#             "DeploymentId": "8jhmdl",
#             "RestApiId": "0b2wl9sn20"
#         }
#     },
#     {
#         "ResourceType": "AWS::ApiGateway::Resource",
#         "LogicalResourceId": "ApiGatewayResource",
#         "ResourceIdentifier": {
#             "RestApiId": "0b2wl9sn20",
#             "ResourceId": "nybwrh"
#         }
#     },
#     {
#         "ResourceType": "AWS::IAM::User",
#         "LogicalResourceId": "IAMUser",
#         "ResourceIdentifier": {
#             "UserName": "2171046"
#         }
#     },
#     {
#         "ResourceType": "AWS::IAM::User",
#         "LogicalResourceId": "IAMUser2",
#         "ResourceIdentifier": {
#             "UserName": "To2-backend"
#         }
#     },
#     {
#         "ResourceType": "AWS::IAM::User",
#         "LogicalResourceId": "IAMUser3",
#         "ResourceIdentifier": {
#             "UserName": "To2-frontend"
#         }
#     }
# ]

AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    IAMGroup:
        DeletionPolicy: "Delete"
        Type: "AWS::IAM::Group"
        Properties:
            Path: "/"
            GroupName: "acc_3rd"
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"

    EC2NetworkAcl:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            VpcId: !Ref EC2VPC

    EC2EIP:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-eip"

    EC2VPC:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.22.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-vpc"

    EC2SecurityGroup:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "alb SG"
            GroupName: !Sub "${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-SG"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "ECS container SG"
            GroupName: !Sub "[${DynamoDBTable}]ecs_SG"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-ecs-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup4
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "vpc"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                SourceSecurityGroupId: "sg-060cd048907161936"
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "self allow"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "alb"
                FromPort: 8080
                IpProtocol: "tcp"
                ToPort: 8080
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup4
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "vpc"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
              - 
                SourceSecurityGroupId: "sg-060cd048907161936"
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "self allow"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"
              - 
                DestinationPrefixListId: "pl-78a54011"
                IpProtocol: "-1"

    EC2Subnet:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "10.22.1.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-public-subnet-a"

    EC2Subnet2:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet4.AvailabilityZone
            CidrBlock: "10.22.2.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-public-subnet-c"

    LambdaFunction:
        DeletionPolicy: "Delete"
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "${DynamoDBTable}-updateUser"
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "awslambda-ap-ne-2-tasks"
                S3Key: !Sub "/snapshots/416536687282/${DynamoDBTable}-updateUser-7f1bd7e5-ee51-41d6-860e-0daf50aa410d"
                S3ObjectVersion: "x1FhPPKwR6hDhiCqmw_QBNs2wtKJDS5h"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::416536687282:role/service-role/${DynamoDBTable}-lambda"
            Runtime: "nodejs18.x"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        DeletionPolicy: "Delete"
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "${DynamoDBTable}-access-token-email"
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "awslambda-ap-ne-2-tasks"
                S3Key: !Sub "/snapshots/416536687282/${DynamoDBTable}-access-token-email-fb1d2afe-6edf-465b-bb9a-eb1889ab15ff"
                S3ObjectVersion: "Nb_f47FrZjIJGAFprNuD5HrHbCqy7vZy"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::416536687282:role/service-role/${DynamoDBTable}-access-token-email-role-ijjkxolt"
            Runtime: "nodejs18.x"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction3:
        DeletionPolicy: "Delete"
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: !Sub "${DynamoDBTable}-jwks-proxy"
            Handler: "lambda_function.lambda_handler"
            Architectures: 
              - "x86_64"
            Code: 
                S3Bucket: "awslambda-ap-ne-2-tasks"
                S3Key: !Sub "/snapshots/416536687282/${DynamoDBTable}-jwks-proxy-c5765ac0-0569-4e14-9186-fd910341df22"
                S3ObjectVersion: "Q.bnsHGc5duHQLLg0nftXSukQtLEEoif"
            MemorySize: 128
            Role: !Sub "arn:aws:iam::416536687282:role/service-role/${DynamoDBTable}-jwks-proxy-role-mrbf6z1o"
            Runtime: "python3.11"
            Timeout: 3
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    ElasticLoadBalancingV2LoadBalancer:
        DeletionPolicy: "Delete"
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Sub "${DynamoDBTable}-alb"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet2
              - !Ref EC2Subnet
            SecurityGroups: 
              - "sg-0045c90991e71a544"
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "3600"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "load_balancing.cross_zone.enabled"
                Value: "true"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "client_keep_alive.seconds"
                Value: "3600"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"
              - 
                Key: "zonal_shift.config.enabled"
                Value: "false"
              - 
                Key: "connection_logs.s3.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        DeletionPolicy: "Delete"
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-TLS13-1-2-Res-2021-06"
            Certificates: 
              - 
                CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:416536687282:certificate/72a35085-77a4-4282-ba23-36e9638ea1ad"
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:416536687282:targetgroup/${DynamoDBTable}-target-group/58b0509deb0c10d4"
                Type: "forward"

    ElasticLoadBalancingV2Listener2:
        DeletionPolicy: "Delete"
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    EC2SecurityGroup3:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "mq-message-broker"
            GroupName: !Sub "${DynamoDBTable}-broker-SG"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-mqbroker-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "allow OpenWire from ecs fargate"
                FromPort: 61617
                IpProtocol: "tcp"
                ToPort: 61617
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "allow stomp from ecs fargate"
                FromPort: 61614
                IpProtocol: "tcp"
                ToPort: 61614
              - 
                SourceSecurityGroupId: !Ref EC2SecurityGroup2
                SourceSecurityGroupOwnerId: "416536687282"
                Description: "allow amqps, amqp from ecs fargate"
                FromPort: 5671
                IpProtocol: "tcp"
                ToPort: 5672
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                Description: "all traffic allowed"
                FromPort: 0
                IpProtocol: "tcp"
                ToPort: 65535

    EC2SecurityGroup4:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "default VPC security group"
            GroupName: "default"
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-vpc-SG"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                SourceSecurityGroupId: "sg-04ab50d4acbfc886b"
                SourceSecurityGroupOwnerId: "416536687282"
                IpProtocol: "-1"
              - 
                CidrIp: "0.0.0.0/0"
                Description: "allow https request"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2NetworkInterface:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0bd18f6e2d782fd3b"
            PrivateIpAddress: "10.22.102.105"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.105"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface2:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0a50aa33af5d6897b"
            PrivateIpAddress: "10.22.102.15"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.15"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface3:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "Amazon MQ network interface for broker b-4d931a7d-6e95-4b20-99ee-5b7ef9f36770"
            PrivateIpAddress: "10.22.102.248"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.248"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup3

    EC2NetworkInterface4:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0c45b03e347fb871a"
            PrivateIpAddress: "10.22.102.119"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.119"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface5:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0066220fb2c274688"
            PrivateIpAddress: "10.22.102.52"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.52"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface6:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-09189c03a3c4149e4"
            PrivateIpAddress: "10.22.102.154"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.154"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface7:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-05ea5b4053538444d"
            PrivateIpAddress: "10.22.102.104"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.104"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface8:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0a8c591a044ab9696"
            PrivateIpAddress: "10.22.102.149"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.149"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup3

    EC2NetworkInterface9:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0610a31e1cd7abff6"
            PrivateIpAddress: "10.22.102.188"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.188"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface10:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/f480be342bfa447e"
            PrivateIpAddress: "10.22.2.56"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.2.56"
                Primary: true
            SubnetId: !Ref EC2Subnet2
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup

    EC2NetworkInterface11:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "arn:aws:ecs:${AWS::Region}:416536687282:attachment/d19b1c50-a709-42a7-bba9-ea2d794e96ae"
            PrivateIpAddress: "10.22.102.159"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.159"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            Tags: 
              - 
                Key: "aws:ecs:serviceName"
                Value: !GetAtt ECSService.Name
              - 
                Key: "aws:ecs:clusterName"
                Value: !Ref ECSCluster
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface12:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0b15a80500c26e1f9"
            PrivateIpAddress: "10.22.102.60"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.102.60"
                Primary: true
            SubnetId: !Ref EC2Subnet4
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface13:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0a50aa33af5d6897b"
            PrivateIpAddress: "10.22.101.223"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.223"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface14:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0610a31e1cd7abff6"
            PrivateIpAddress: "10.22.101.165"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.165"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface15:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0066220fb2c274688"
            PrivateIpAddress: "10.22.101.164"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.164"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface16:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "Amazon MQ network interface for broker b-4d931a7d-6e95-4b20-99ee-5b7ef9f36770"
            PrivateIpAddress: "10.22.101.250"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.250"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup3

    EC2NetworkInterface17:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0b15a80500c26e1f9"
            PrivateIpAddress: "10.22.101.67"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.67"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface18:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-09189c03a3c4149e4"
            PrivateIpAddress: "10.22.101.60"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.60"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface19:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0c45b03e347fb871a"
            PrivateIpAddress: "10.22.101.71"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.71"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface20:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0a8c591a044ab9696"
            PrivateIpAddress: "10.22.101.246"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.246"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup3

    EC2NetworkInterface21:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "Interface for NAT Gateway ${EC2NatGateway}"
            PrivateIpAddress: "10.22.1.166"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.1.166"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: false

    EC2NetworkInterface22:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/f480be342bfa447e"
            PrivateIpAddress: "10.22.1.129"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.1.129"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup

    EC2NetworkInterface23:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-0bd18f6e2d782fd3b"
            PrivateIpAddress: "10.22.101.29"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.29"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface24:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "VPC Endpoint Interface vpce-05ea5b4053538444d"
            PrivateIpAddress: "10.22.101.149"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "10.22.101.149"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet: 
              - !Ref EC2SecurityGroup2

    ECSCluster:
        DeletionPolicy: "Delete"
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !Sub "${DynamoDBTable}-ecs-cluster"
            CapacityProviders: 
              - "FARGATE"
              - "FARGATE_SPOT"

    ECSService:
        DeletionPolicy: "Delete"
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: !Sub "${DynamoDBTable}-task-definition-service-ovxd3686"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers: 
              - 
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:${AWS::Region}:416536687282:targetgroup/${DynamoDBTable}-target-group/58b0509deb0c10d4"
                ContainerName: !Sub "${DynamoDBTable}-first"
                ContainerPort: 8080
            DesiredCount: 1
            PlatformVersion: "1.4.0"
            TaskDefinition: !Ref ECSTaskDefinition
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker: 
                    Enable: true
                    Rollback: true
            Role: "arn:aws:iam::416536687282:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "DISABLED"
                    SecurityGroups: 
                      - !Ref EC2SecurityGroup2
                    Subnets: 
                      - !Ref EC2Subnet3
                      - !Ref EC2Subnet4
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"
            DeploymentController: 
                Type: "ECS"
            CapacityProviderStrategy: 
              - 
                CapacityProvider: "FARGATE"
                Weight: 1
                Base: 0

    ECSTaskDefinition:
        DeletionPolicy: "Delete"
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions: 
              - 
                Essential: true
                Image: !Sub "416536687282.dkr.ecr.${AWS::Region}.amazonaws.com/${DynamoDBTable}:latest"
                LogConfiguration: 
                    LogDriver: "awslogs"
                    Options: 
                        awslogs-group: !Sub "/ecs/${DynamoDBTable}-task-definition"
                        mode: "non-blocking"
                        awslogs-create-group: "true"
                        max-buffer-size: "25m"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                Name: !Sub "${DynamoDBTable}-first"
                PortMappings: 
                  - 
                    ContainerPort: 8080
                    HostPort: 8080
                    Protocol: "tcp"
            Family: !Sub "${DynamoDBTable}-task-definition"
            TaskRoleArn: "arn:aws:iam::416536687282:role/ecsTaskExecutionRole"
            ExecutionRoleArn: "arn:aws:iam::416536687282:role/ecsTaskExecutionRole"
            NetworkMode: "awsvpc"
            RequiresCompatibilities: 
              - "FARGATE"
            Cpu: "512"
            Memory: "1024"

    S3Bucket:
        DeletionPolicy: "Delete"
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "${DynamoDBTable}-chat"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            CorsConfiguration: 
                CorsRules: 
                  - 
                    AllowedHeaders: 
                      - "*"
                    AllowedMethods: 
                      - "GET"
                      - "PUT"
                      - "POST"
                      - "HEAD"
                    AllowedOrigins: 
                      - "*"
            WebsiteConfiguration: 
                IndexDocument: "index.html"
                ErrorDocument: "index.html"
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerPreferred"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    DynamoDBTable:
        DeletionPolicy: "Delete"
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "PK"
                AttributeType: "S"
              - 
                AttributeName: "SK"
                AttributeType: "S"
            BillingMode: "PAY_PER_REQUEST"
            TableName: "to2"
            KeySchema: 
              - 
                AttributeName: "PK"
                KeyType: "HASH"
              - 
                AttributeName: "SK"
                KeyType: "RANGE"

    EC2Subnet3:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.22.101.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-private-subnet-a"

    EC2Subnet4:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "10.22.102.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-private-subnet-c"

    EC2NatGateway:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-natgateway"
            AllocationId: !GetAtt EC2EIP.AllocationId

    EC2InternetGateway:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-igw"

    EC2RouteTable:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-public-rt"

    EC2RouteTable2:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-private-rt"

    EC2RouteTable3:
        DeletionPolicy: "Delete"
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: !Sub "${DynamoDBTable}-vpc-rt"

    Route53HostedZone:
        DeletionPolicy: "Delete"
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: !Sub "${S3Bucket}.shop."

    ApiGatewayRestApi:
        DeletionPolicy: "Delete"
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: !Sub "${DynamoDBTable}-jwks-api"
            ApiKeySourceType: "HEADER"
            Policy: !Sub "{\\\"Version\\\":\\\"2012-10-17\\\",\\\"Statement\\\":[{\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":\\\"*\\\",\\\"Action\\\":\\\"execute-api:Invoke\\\",\\\"Resource\\\":\\\"arn:aws:execute-api:${AWS::Region}:416536687282:0b2wl9sn20\\/*\\/*\\/*\\\",\\\"Condition\\\":{\\\"StringEquals\\\":{\\\"aws:SourceVpce\\\":\\\"vpce-09189c03a3c4149e4\\\"}}}]}"
            EndpointConfiguration: 
                Types: 
                  - "PRIVATE"

    ApiGatewayMethod:
        DeletionPolicy: "Delete"
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !Ref ApiGatewayResource
            HttpMethod: "GET"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            RequestModels: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                StatusCode: "200"
            Integration: 
                CacheNamespace: !Ref ApiGatewayResource
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:416536687282:function:${LambdaFunction3}/invocations"

    ApiGatewayStage:
        DeletionPolicy: "Delete"
        Type: "AWS::ApiGateway::Stage"
        Properties:
            StageName: "prod"
            DeploymentId: !Ref ApiGatewayDeployment
            RestApiId: !Ref ApiGatewayRestApi
            CacheClusterEnabled: false
            CacheClusterSize: "0.5"
            TracingEnabled: false

    ApiGatewayDeployment:
        DeletionPolicy: "Delete"
        Type: "AWS::ApiGateway::Deployment"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi

    ApiGatewayResource:
        DeletionPolicy: "Delete"
        Type: "AWS::ApiGateway::Resource"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            PathPart: "jwks"
            ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

    IAMUser:
        DeletionPolicy: "Delete"
        Type: "AWS::IAM::User"
        Properties:
            Path: "/"
            UserName: "2171046"
            Groups: 
              - !Ref IAMGroup
            Tags: 
              - 
                Key: "AKIAWB64FOKZMLKMZPEN"
                Value: !Sub "${DynamoDBTable}-share"
              - 
                Key: "AKIAWB64FOKZN4FEVAUS"
                Value: "aws-cli"
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/IAMUserChangePassword"

    IAMUser2:
        DeletionPolicy: "Delete"
        Type: "AWS::IAM::User"
        Properties:
            Path: "/"
            UserName: "To2-backend"
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"
              - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

    IAMUser3:
        DeletionPolicy: "Delete"
        Type: "AWS::IAM::User"
        Properties:
            Path: "/"
            UserName: "To2-frontend"
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/CloudFrontFullAccess"
              - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

