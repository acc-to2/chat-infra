AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates Lambda functions for the application backend and necessary IAM Roles.'

Parameters:
  ProjectName:
    Type: String
  DynamoDbTableName:
    Type: String
    Description: "Name of the DynamoDB table the functions will interact with."
  CognitoUserPoolId:
    Type: String
    Description: "ID of the Cognito User Pool for JWKS proxy."
  CodeS3Bucket:
    Type: String
    Description: "S3 bucket where Lambda function code is stored."
  UpdateUserLambdaS3Key:
    Type: String
  UpdateUserLambdaS3Version:
    Type: String
  AccessTokenEmailLambdaS3Key:
    Type: String
  AccessTokenEmailLambdaS3Version:
    Type: String
  JwksProxyLambdaS3Key:
    Type: String
  JwksProxyLambdaS3Version:
    Type: String

Resources:
  # IAM Role for functions that need to access DynamoDB
  DynamoDBLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-dynamodb-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${ProjectName}-dynamodb-access-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDbTableName}"

  # IAM Role for the JWKS proxy function (only needs basic execution)
  JwksProxyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-jwks-proxy-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function 1: updateUser
  UpdateUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-updateUser"
      Handler: "index.handler"
      Runtime: "nodejs18.x"
      Role: !GetAtt DynamoDBLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref UpdateUserLambdaS3Key
        S3ObjectVersion: !Ref UpdateUserLambdaS3Version
      MemorySize: 128
      Timeout: 3
      Architectures: ["x86_64"]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDbTableName
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-updateUser"

  # Lambda Function 2: access-token-email
  AccessTokenEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-access-token-email"
      Handler: "index.handler"
      Runtime: "nodejs18.x"
      Role: !GetAtt DynamoDBLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref AccessTokenEmailLambdaS3Key
        S3ObjectVersion: !Ref AccessTokenEmailLambdaS3Version
      MemorySize: 128
      Timeout: 3
      Architectures: ["x86_64"]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDbTableName
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-access-token-email"
          
  # Lambda Function 3: jwks-proxy
  JwksProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-jwks-proxy"
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.11"
      Role: !GetAtt JwksProxyLambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref JwksProxyLambdaS3Key
        S3ObjectVersion: !Ref JwksProxyLambdaS3Version
      MemorySize: 128
      Timeout: 3
      Architectures: ["x86_64"]
      Environment:
        Variables:
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
          AWS_REGION: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-jwks-proxy"
          
Outputs:
  UpdateUserFunctionArn:
    Value: !GetAtt UpdateUserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UpdateUserFunctionArn"
  AccessTokenEmailFunctionArn:
    Value: !GetAtt AccessTokenEmailFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AccessTokenEmailFunctionArn"
  JwksProxyFunctionArn:
    Value: !GetAtt JwksProxyFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-JwksProxyFunctionArn"