AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer, Target Group, and Listeners'

Parameters:
  ProjectName:
    Type: String
  VpcId:
    Type: String
  PublicSubnets:
    Type: CommaDelimitedList
    Description: "Comma-separated list of Public Subnet IDs for the ALB"
  AlbSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
  CertificateArn:
    Type: String
  ContainerPort:
    Type: Number
    Description: "Port the container is listening on"
  HealthCheckPath:
    Type: String
    Description: "Health check path for the target group"
  
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-alb"
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref AlbSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-alb"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-tg"
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: !Ref ContainerPort
      TargetType: ip
      HealthCheckPath: !Ref HealthCheckPath
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-tg"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-AlbDnsName"
  LoadBalancerCanonicalHostedZoneID:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub "${AWS::StackName}-AlbHostedZoneId"
  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroupArn"